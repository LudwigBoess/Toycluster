!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ANGLE_MAX	substructure.c	/^#define ANGLE_MAX /;"	d	file:
ANGLE_MAX	substructure.c	/^#undef ANGLE_MAX$/;"	d	file:
A_hernq	globals.h	/^    double A_hernq;                 \/\/ Hernquist parameter <- C_nfw$/;"	m	struct:HaloProperties
Apot	globals.h	/^	float Apot[3];$/;"	m	struct:GasParticleData
Apply_kinematics	setup.c	/^void Apply_kinematics()$/;"	f
Assert	macro.h	/^#define Assert(/;"	d
Assert_Info	aux.c	/^void Assert_Info(const char *func, const char *file, int line,$/;"	f
BMAX	magnetic_field.c	/^#define BMAX /;"	d	file:
Baryon_Fraction	cosmo.h	/^    double Baryon_Fraction;$/;"	m	struct:Universe
Beta	globals.h	/^    double Beta;                    \/\/ Beta-model beta$/;"	m	struct:HaloProperties
Bf_eff	globals.h	/^	double Bf_eff;					\/\/ Effective Baryon Fraction in r500$/;"	m	struct:HaloProperties
Bfld	globals.h	/^    float Bfld[3];$/;"	m	struct:GasParticleData
Bfld_Eta	globals.h	/^    double Bfld_Eta;                \/\/ Bfld scaling (Bonafede 10)$/;"	m	struct:Parameters
Bfld_Norm	globals.h	/^    double Bfld_Norm;               \/\/ B0$/;"	m	struct:Parameters
Bfld_from_rotA_SPH	sph.c	/^extern void Bfld_from_rotA_SPH()$/;"	f
Bitfield	tree.c	/^	uint32_t Bitfield; 	\/\/ bit 0-5:level, 6-8:key, 9:local, 10:top, 11-31:free$/;"	m	struct:Tree_Node	file:
Block	io.h	/^} Block;$/;"	v	typeref:struct:Block_Info
Block_Info	io.h	/^struct Block_Info{$/;"	s
BoxSize	io.h	/^    double BoxSize;$/;"	m	struct:GADGET_Header
Boxsize	globals.h	/^    double Boxsize;$/;"	m	struct:Parameters
Build_Tree	tree.c	/^void Build_Tree()$/;"	f
Build_tree	oldtree.c	/^extern void Build_tree()$/;"	f
BulkVel	globals.h	/^    double BulkVel[3];              \/\/ Velocity rel to Center of Mass$/;"	m	struct:HaloProperties
Bytes_per_element	io.h	/^    size_t Bytes_per_element;$/;"	m	struct:Block_Info
CHARBUFSIZE	globals.h	/^#define CHARBUFSIZE /;"	d
COMPARE_DATA	sort.c	/^#define COMPARE_DATA(/;"	d	file:
C_nfw	globals.h	/^    double C_nfw;                   \/\/ NFW profile concentration param$/;"	m	struct:HaloProperties
Concentration_parameter	setup.c	/^double Concentration_parameter(const int i)$/;"	f
Cosmo	aux.c	/^struct Universe Cosmo;$/;"	v	typeref:struct:Universe
Critical_Density	cosmo.c	/^double Critical_Density(const double z)$/;"	f
Cuspy	globals.h	/^    int Cuspy;                      \/\/ Cuspy Parameter, set in Binary$/;"	m	struct:Parameters
DEG2RAD	globals.h	/^#define DEG2RAD	/;"	d
DESNNGB	globals.h	/^#define DESNNGB /;"	d
DM	globals.h	/^    struct ParticleData *DM;        \/\/ DM Particle Data in P$/;"	m	struct:HaloProperties	typeref:struct:HaloProperties::ParticleData
DNext	tree.c	/^	int DNext;		   	\/\/ Distance to the next node; or particle -DNext-1$/;"	m	struct:Tree_Node	file:
D_CoM	globals.h	/^    double D_CoM[3];                \/\/ Distance from Center of Mass in x$/;"	m	struct:HaloProperties
Density	globals.h	/^    double Density;$/;"	m	struct:Units
Density	unit.c	/^double Density(float rho)$/;"	f
E	velocities.c	/^	double E;$/;"	m	struct:__anon1	file:
ENERGY_ORBIT_FRACTION_SUBH	substructure.c	/^#define ENERGY_ORBIT_FRACTION_SUBH /;"	d	file:
ENERGY_ORBIT_FRACTION_SUBH	substructure.c	/^#undef ENERGY_ORBIT_FRACTION_SUBH$/;"	d	file:
ERRDIFF_LIMIT	wvt_relax.c	/^#define ERRDIFF_LIMIT /;"	d	file:
Energy	globals.h	/^    double Energy;$/;"	m	struct:Units
Ez	cosmo.c	/^double Ez(const double z)$/;"	f
F1	temperature.c	/^static double F1(const double r, const double rc, const double a)$/;"	f	file:
F2	temperature.c	/^static double F2(const double r, const double rc)$/;"	f	file:
Find_hsml	sph.c	/^extern bool Find_hsml(const int ipart, const int *ngblist, const int ngbcnt,$/;"	f
Find_ngb_simple	wvt_relax.c	/^int Find_ngb_simple(const int ipart,  const float hsml, int *ngblist)$/;"	f
Find_ngb_tree	oldtree.c	/^extern int Find_ngb_tree(const size_t ipart, const float hsml, int *ngblist)$/;"	f
Find_ngb_tree	tree.c	/^int Find_ngb_tree(const int ipart, const float hsml, int ngblist[NGBMAX])$/;"	f
Find_sph_quantities	sph.c	/^extern void Find_sph_quantities() $/;"	f
First	globals.h	/^	int First;$/;"	m	struct:SubhaloData
Free	macro.h	/^#define Free(/;"	d
Free_info	aux.c	/^void Free_info(const char* func, const char* file, const int line, void *ptr) $/;"	f
G	velocities.c	/^static double G = 0; $/;"	v	file:
GADGET_Header	io.h	/^extern struct GADGET_Header{$/;"	s
GLOBALS_H	globals.h	/^#define GLOBALS_H$/;"	d
Gas	globals.h	/^    struct ParticleData *Gas;       \/\/ Gas Particle Data in P$/;"	m	struct:HaloProperties	typeref:struct:HaloProperties::ParticleData
GasParticleData	globals.h	/^extern struct GasParticleData {$/;"	s
Gas_core_radius	setup.c	/^double Gas_core_radius(const int i, char *string)$/;"	f
Gas_density_profile	setup.c	/^double Gas_density_profile(const double r, const double rho0,$/;"	f
Global_density_model	wvt_relax.c	/^float Global_density_model(const int ipart)$/;"	f
Grav	globals.h	/^#define Grav /;"	d
GravSofteningLength	globals.h	/^	double GravSofteningLength;$/;"	m	struct:Parameters
Guess_hsml	oldtree.c	/^extern float Guess_hsml(const size_t ipart, const int DesNumNgb)$/;"	f
Guess_hsml	tree.c	/^extern float Guess_hsml(const size_t ipart, const int DesNumNgb)$/;"	f
H0_cgs	cosmo.h	/^    double H0_cgs;$/;"	m	struct:Universe
H_frac	globals.h	/^#define H_frac	/;"	d
Halo	aux.c	/^struct HaloProperties Halo[MAXHALOS]; $/;"	v	typeref:struct:HaloProperties
HaloProperties	globals.h	/^extern struct HaloProperties {$/;"	s
Halo_containing	positions.c	/^int Halo_containing(const int type, const float x, const float y, const float z)$/;"	f
Have_Cuspy	globals.h	/^    int Have_Cuspy;                 \/\/ Is this cluster cored or cuspy$/;"	m	struct:HaloProperties
He_frac	globals.h	/^#define He_frac	/;"	d
Header	io.c	/^struct GADGET_Header Header;$/;"	v	typeref:struct:GADGET_Header
Hernquist_density_profile	setup.c	/^Hernquist_density_profile(const double m, const double a, const double r)$/;"	f
Hsml	globals.h	/^    float Hsml;$/;"	m	struct:GasParticleData
HubbleParam	io.h	/^    double HubbleParam;$/;"	m	struct:GADGET_Header
Hubble_Parameter	cosmo.c	/^double Hubble_Parameter(const double z) $/;"	f
ID	globals.h	/^	float ID;$/;"	m	struct:GasParticleData
ID	globals.h	/^	int32_t ID;$/;"	m	struct:ParticleData
INSERT_THRES	sort.c	/^#define INSERT_THRES /;"	d	file:
INT	io.c	/^#define INT /;"	d	file:
INT	io.c	/^#undef INT$/;"	d	file:
IO_BFLD	io.h	/^    IO_BFLD,$/;"	e	enum:iofields
IO_HSML	io.h	/^    IO_HSML,$/;"	e	enum:iofields
IO_ID	io.h	/^    IO_ID,$/;"	e	enum:iofields
IO_LASTENTRY	io.h	/^    IO_LASTENTRY$/;"	e	enum:iofields
IO_POS	io.h	/^    IO_POS,$/;"	e	enum:iofields
IO_RHO	io.h	/^	IO_RHO,$/;"	e	enum:iofields
IO_RHO	io.h	/^    IO_RHO,$/;"	e	enum:iofields
IO_RHOMODEL	io.h	/^	IO_RHOMODEL,$/;"	e	enum:iofields
IO_U	io.h	/^    IO_U,$/;"	e	enum:iofields
IO_VEL	io.h	/^    IO_VEL,$/;"	e	enum:iofields
Idx	peano.c	/^static size_t *Idx = NULL;$/;"	v	file:
Impact_Param	globals.h	/^    double Impact_Param;$/;"	m	struct:Parameters
Internal_Energy_Profile	temperature.c	/^double Internal_Energy_Profile(const int i, const double r)$/;"	f
Internal_Energy_Profile_Analytic	temperature.c	/^double Internal_Energy_Profile_Analytic(const int i, const double d)$/;"	f
Is_Stripped	globals.h	/^	int Is_Stripped;$/;"	m	struct:HaloProperties
JUMPTOLERANCE	sph.c	/^#define JUMPTOLERANCE /;"	d	file:
K	cosmo.h	/^	double K;$/;"	m	struct:Universe
K2eV	globals.h	/^#define K2eV /;"	d
KHIGHCUT	magnetic_field.c	/^#define KHIGHCUT /;"	d	file:
KLOWCUT	magnetic_field.c	/^#define KLOWCUT /;"	d	file:
Key	globals.h	/^	peanoKey Key;$/;"	m	struct:ParticleData
Keys	peano.c	/^static peanoKey *Keys = NULL;$/;"	v	file:
LASTPARAMETERID	io.c	/^#define LASTPARAMETERID /;"	d	file:
LASTPARAMETERID	io.c	/^#undef LASTPARAMETERID$/;"	d	file:
Label	io.h	/^    char Label[4];$/;"	m	struct:Block_Info
Length	globals.h	/^    double Length;$/;"	m	struct:Units
Level	tree.c	/^int Level(const int node)$/;"	f
MAXHALOS	globals.h	/^#define MAXHALOS /;"	d
MAXTAGS	globals.h	/^#define MAXTAGS /;"	d
MAX_IMPACT_FACTOR	substructure.c	/^#define MAX_IMPACT_FACTOR /;"	d	file:
MIN_DENSITY_CONTRAST	substructure.c	/^#define MIN_DENSITY_CONTRAST /;"	d	file:
MIN_SUBHALO_MASS	substructure.c	/^#define MIN_SUBHALO_MASS /;"	d	file:
MIN_SUBHALO_MASS	substructure.c	/^#undef MIN_SUBHALO_MASS$/;"	d	file:
Make_IDs	ids.c	/^void Make_IDs()$/;"	f
Make_magnetic_field	magnetic_field.c	/^void Make_magnetic_field()$/;"	f
Make_positions	positions.c	/^void Make_positions()$/;"	f
Make_temperatures	temperature.c	/^void Make_temperatures()$/;"	f
Make_velocities	velocities.c	/^void Make_velocities()$/;"	f
Malloc	macro.h	/^#define Malloc(/;"	d
Malloc_info	aux.c	/^void *Malloc_info(const char* func, const char* file, const int line, $/;"	f
Mass	globals.h	/^	double Mass;$/;"	m	struct:Units
Mass	globals.h	/^    double Mass[6];                 \/\/ Mass in 6 particle types$/;"	m	struct:HaloProperties
Mass200	globals.h	/^    double Mass200[6];              \/\/ Mass inside R200$/;"	m	struct:HaloProperties
MassCorrFac	globals.h	/^	double MassCorrFac; 			\/\/ Correct DM profile for Rsample != infty$/;"	m	struct:HaloProperties
MassFraction	globals.h	/^	double MassFraction;$/;"	m	struct:SubhaloData
Mass_Ratio	globals.h	/^    double Mass_Ratio;$/;"	m	struct:Parameters
Mass_profile	setup.c	/^double Mass_profile(const double r, const double rho0, const double rc,$/;"	f
Mass_profile	test.c	/^double Mass_profile(const double r, const double rho0, const double rc,$/;"	f
Mass_profile_table	positions.c	/^       Mass_profile_table[NTABLE];$/;"	v	file:
Max_Nodes	tree.c	/^int Max_Nodes = 0;$/;"	v
Mpart	globals.h	/^    double Mpart[6];				\/\/ particle masses$/;"	m	struct:Parameters
Msol2cgs	globals.h	/^#define Msol2cgs /;"	d
Mtot200	globals.h	/^    double Mtot200;					\/\/ total mass in R200 of system$/;"	m	struct:Parameters
Mtotal	globals.h	/^	double Mtotal;$/;"	m	struct:SubhaloData
Mtotal	globals.h	/^    double Mtotal;                  \/\/ Mass of this cluster$/;"	m	struct:HaloProperties
Mtotal	globals.h	/^    double Mtotal;$/;"	m	struct:Parameters
Mtotal200	globals.h	/^    double Mtotal200;               \/\/ Total Mass inside R200$/;"	m	struct:HaloProperties
NGBMAX	globals.h	/^#define NGBMAX /;"	d
NNGBDEV	globals.h	/^#define NNGBDEV /;"	d
NNodes	tree.c	/^int NNodes = 0;$/;"	v
NODES_PER_PARTICLE	oldtree.c	/^#define  NODES_PER_PARTICLE /;"	d	file:
NODES_PER_PARTICLE	tree.c	/^#define NODES_PER_PARTICLE /;"	d	file:
NSAMPLE	velocities.c	/^#define NSAMPLE /;"	d	file:
NSAMPLE	velocities.c	/^#undef NSAMPLE$/;"	d	file:
NTABLE	positions.c	/^#define NTABLE /;"	d	file:
NTABLE	velocities.c	/^#define NTABLE /;"	d	file:
NTABLE	velocities.c	/^#undef NTABLE$/;"	d	file:
NThreads	globals.h	/^    int NThreads;          \/\/ Number of openMP threads$/;"	m	struct:OpenMP_infos
NUMITER	wvt_relax.c	/^#define NUMITER /;"	d	file:
N_PEANO_TRIPLETS	peano.h	/^#define N_PEANO_TRIPLETS /;"	d
Name	io.h	/^    char Name[CHARBUFSIZE];$/;"	m	struct:Block_Info
Ngbcnt	tree.h	/^int Ngbcnt ;$/;"	v
Ngbcnt	wvt_relax.c	/^int ngblist[NGBMAX] = { 0 }, Ngbcnt ;$/;"	v
Ngblist	tree.h	/^int Ngblist[NGBMAX];$/;"	v
Nhalos	globals.h	/^	int Nhalos;$/;"	m	struct:SubhaloData
Nhalos	globals.h	/^    int Nhalos;                     \/\/ Number of halos, incl. substructure$/;"	m	struct:Parameters
Npart	globals.h	/^	int Npart[6];$/;"	m	struct:SubhaloData
Npart	globals.h	/^    long long Npart[6];             \/\/ npart of particle type$/;"	m	struct:HaloProperties
Npart	globals.h	/^    long long Npart[6];$/;"	m	struct:Parameters
Npart	io.h	/^    long long Npart[6];$/;"	m	struct:Block_Info
Npart	tree.c	/^	int Npart;			\/\/ Number of particles in node$/;"	m	struct:Tree_Node	file:
Ntot	io.h	/^    long long Ntot;$/;"	m	struct:Block_Info
Ntot_thisHalo	io.h	/^    long long Ntot_thisHalo;$/;"	m	struct:Block_Info
Ntotal	globals.h	/^	int Ntotal;$/;"	m	struct:SubhaloData
Ntotal	globals.h	/^    long long Ntotal;               \/\/ total npart this cluster$/;"	m	struct:HaloProperties
Ntotal	globals.h	/^    long long Ntotal;$/;"	m	struct:Parameters
Omega0	io.h	/^    double Omega0;$/;"	m	struct:GADGET_Header
OmegaLambda	io.h	/^    double OmegaLambda;$/;"	m	struct:GADGET_Header
Omega_0	cosmo.h	/^	double Omega_0;$/;"	m	struct:Universe
Omega_L	cosmo.h	/^	double Omega_L;$/;"	m	struct:Universe
Omega_M	cosmo.c	/^double Omega_M(const double z)$/;"	f
Omega_M	cosmo.h	/^	double Omega_M;$/;"	m	struct:Universe
Omp	aux.c	/^struct OpenMP_infos Omp = { 0 };$/;"	v	typeref:struct:OpenMP_infos
OpenMP_infos	globals.h	/^extern struct OpenMP_infos{$/;"	s
Output_File	globals.h	/^    char Output_File[CHARBUFSIZE];$/;"	m	struct:Parameters
Overdensity_Parameter	cosmo.c	/^double Overdensity_Parameter()$/;"	f
Overdensity_Parameter	cosmo.h	/^	double Overdensity_Parameter;	\/\/ Delta200 at cluster redshift$/;"	m	struct:Universe
P	aux.c	/^struct ParticleData *P;$/;"	v	typeref:struct:ParticleData
PARALLEL_THRES_HEAPSORT	sort.c	/^#define PARALLEL_THRES_HEAPSORT /;"	d	file:
PARALLEL_THRES_QSORT	sort.c	/^#define PARALLEL_THRES_QSORT /;"	d	file:
PROG_NAME	globals.h	/^#define PROG_NAME /;"	d
Param	aux.c	/^struct Parameters Param;$/;"	v	typeref:struct:Parameters
Parameters	globals.h	/^extern struct Parameters{$/;"	s
ParticleData	globals.h	/^extern struct ParticleData{$/;"	s
Peano_Key	peano.c	/^peanoKey Peano_Key(const double x, const double y, const double z)$/;"	f
Pos	globals.h	/^    float Pos[3];$/;"	m	struct:ParticleData
Pos	tree.c	/^	float Pos[3];		\/\/ Node Center$/;"	m	struct:Tree_Node	file:
Profile	macro.h	/^#define Profile(/;"	d
Qsort	sort.c	/^void Qsort(const int nThreads, void *const data_ptr, int nData, size_t size, $/;"	f
Qsort_Index	sort.c	/^void Qsort_Index(const int nThreads, size_t *perm, void *const data, $/;"	f
R200	globals.h	/^    double R200;                    \/\/ Virial Radius$/;"	m	struct:HaloProperties
R200_TO_RMAX_RATIO	globals.h	/^#define R200_TO_RMAX_RATIO /;"	d
R500	globals.h	/^    double R500;                    \/\/ Observational virial Radius$/;"	m	struct:HaloProperties
REAL	io.c	/^#define REAL /;"	d	file:
REAL	io.c	/^#undef REAL$/;"	d	file:
RMIN	velocities.c	/^#define RMIN /;"	d	file:
R_Sample	globals.h	/^    double R_Sample[2];                \/\/ DM Sampling size$/;"	m	struct:HaloProperties
Rc_Fac	globals.h	/^	double Rc_Fac;$/;"	m	struct:Parameters
Rcore	globals.h	/^    double Rcore;                   \/\/ Beta-model core radius$/;"	m	struct:HaloProperties
Rcut	globals.h	/^	double Rcut;					\/\/ SPH Sampling size$/;"	m	struct:HaloProperties
Read_param_file	io.c	/^void Read_param_file(char *filename)$/;"	f
Realloc	macro.h	/^#define Realloc(/;"	d
Realloc_info	aux.c	/^void *Realloc_info(const char* func, const char* file, const int line, $/;"	f
Reallocate_P	macro.h	/^#define Reallocate_P(/;"	d
Reassign_particles_to_halos	positions.c	/^void Reassign_particles_to_halos()$/;"	f
Redshift	globals.h	/^	double Redshift;				\/\/ cluster redshift for scaling relations$/;"	m	struct:Parameters
Regularise_sph_particles	wvt_relax.c	/^void Regularise_sph_particles()$/;"	f
Reversed_Peano_Key	peano.c	/^peanoKey Reversed_Peano_Key(const double x, const double y, const double z)$/;"	f
Rho	globals.h	/^	float Rho;$/;"	m	struct:GasParticleData
Rho0	globals.h	/^    double Rho0;                    \/\/ Density normalisation$/;"	m	struct:HaloProperties
Rho0_Fac	globals.h	/^	double Rho0_Fac;$/;"	m	struct:Parameters
Rho_Model	globals.h	/^	float Rho_Model;$/;"	m	struct:GasParticleData
Rho_crit0	cosmo.h	/^    double Rho_crit0;$/;"	m	struct:Universe
Rs	globals.h	/^	float Rs[3];$/;"	m	struct:GasParticleData
Rs	globals.h	/^    double Rs;                      \/\/ NFW eq. scale radius$/;"	m	struct:HaloProperties
SPECTRAL_INDEX	magnetic_field.c	/^#define SPECTRAL_INDEX /;"	d	file:
STACK_SIZE	sort.c	/^#define STACK_SIZE /;"	d	file:
STRING	io.c	/^#define STRING /;"	d	file:
STRING	io.c	/^#undef STRING$/;"	d	file:
SWAP	sort.c	/^#define SWAP(/;"	d	file:
SWAP_SIZE_T	sort.c	/^#define SWAP_SIZE_T(/;"	d	file:
Seed	globals.h	/^	unsigned short Seed[3]; \/\/ random number seed: erand48(Omp.Seed)$/;"	m	struct:OpenMP_infos
Set_cosmology	cosmo.c	/^void Set_cosmology()$/;"	f
Set_units	unit.c	/^void Set_units()$/;"	f
Setup	setup.c	/^void Setup()$/;"	f
Setup_Substructure	substructure.c	/^void Setup_Substructure()$/;"	f
SharedStackDataChar	sort.c	/^static struct SharedStackDataChar { \/\/ work queue, holding partitions$/;"	s	file:
SharedStackDataSizeT	sort.c	/^static struct SharedStackDataSizeT {$/;"	s	file:
Shift_Origin	setup.c	/^void Shift_Origin()$/;"	f
Show_mass_in_r200	positions.c	/^void Show_mass_in_r200()$/;"	f
Size	tree.c	/^	float Size;$/;"	m	struct:Tree_Node	file:
Smooth_SPH_quantities	sph.c	/^extern void Smooth_SPH_quantities()$/;"	f
Sort_Particles_By_Peano_Key	peano.c	/^void Sort_Particles_By_Peano_Key()$/;"	f
SphP	aux.c	/^struct GasParticleData *SphP;$/;"	v	typeref:struct:GasParticleData
SphP	globals.h	/^    struct GasParticleData *SphP;   \/\/ Gas Particle Data in SphP$/;"	m	struct:HaloProperties	typeref:struct:HaloProperties::GasParticleData
Sub	aux.c	/^struct SubhaloData Sub = { 2 , 0 }; \/\/ set Sub.First$/;"	v	typeref:struct:SubhaloData
SubFirstMass	globals.h	/^	double SubFirstMass;$/;"	m	struct:Parameters
SubFirstPos	globals.h	/^	double SubFirstPos[3];$/;"	m	struct:Parameters
SubFirstVel	globals.h	/^	double SubFirstVel[3];$/;"	m	struct:Parameters
SubhaloData	globals.h	/^extern struct SubhaloData {$/;"	s
T2U	unit.c	/^double T2U(double T)$/;"	f
TABLESIZE	temperature.c	/^#define TABLESIZE /;"	d	file:
TREEBUILDFREQUENCY	wvt_relax.c	/^#define TREEBUILDFREQUENCY /;"	d	file:
TempOffset	globals.h	/^    double TempOffset;              \/\/ T of the parent cluster$/;"	m	struct:HaloProperties
ThreadID	globals.h	/^    int ThreadID;          \/\/ Thread ID of this thread$/;"	m	struct:OpenMP_infos
Time	globals.h	/^    double Time;$/;"	m	struct:Units
Tree	tree.c	/^} *Tree;$/;"	v	typeref:struct:Tree_Node
Tree_Node	tree.c	/^struct Tree_Node {$/;"	s	file:
Tree_Parent	globals.h	/^	int Tree_Parent;$/;"	m	struct:ParticleData
Type	globals.h	/^	int Type;$/;"	m	struct:ParticleData
U	globals.h	/^    float U;$/;"	m	struct:GasParticleData
U2T	unit.c	/^double U2T(double U)$/;"	f
U_Acc	temperature.c	/^static gsl_interp_accel *U_Acc = NULL;$/;"	v	file:
U_Spline	temperature.c	/^static gsl_spline *U_Spline = NULL;$/;"	v	file:
Unit	aux.c	/^struct Units Unit;$/;"	v	typeref:struct:Units
Units	globals.h	/^extern struct Units{$/;"	s
Universe	cosmo.h	/^extern struct Universe{$/;"	s
VERSION	globals.h	/^#define VERSION /;"	d
Val_per_element	io.h	/^    size_t Val_per_element;$/;"	m	struct:Block_Info
VarHsmlFac	globals.h	/^    float VarHsmlFac;$/;"	m	struct:GasParticleData
Vel	globals.h	/^	double Vel;$/;"	m	struct:Units
Vel	globals.h	/^    float Vel[3];$/;"	m	struct:ParticleData
VelMerger	globals.h	/^    double VelMerger[2];            \/\/ Merging velocity$/;"	m	struct:Parameters
WRITE_F90REC	io.c	/^#define WRITE_F90REC /;"	d	file:
WRITE_F90REC	io.c	/^#undef WRITE_F90REC$/;"	d	file:
WVTNNGB	wvt_relax.c	/^#define WVTNNGB /;"	d	file:
Write_output	io.c	/^void Write_output()$/;"	f
ZERO_ENERGY_ORBIT_FRACTION_SUB	globals.h	/^#define ZERO_ENERGY_ORBIT_FRACTION_SUB /;"	d
Zero_Energy_Orbit_Fraction	globals.h	/^	double Zero_Energy_Orbit_Fraction;$/;"	m	struct:Parameters
a0	cosmo.c	/^static const double a0 = 1;$/;"	v	file:
a2t	cosmo.h	/^	double (*a2t)(double);$/;"	m	struct:Universe
a2t_cgs	cosmo.c	/^double a2t_cgs(double a)$/;"	f
acc	velocities.c	/^	gsl_interp_accel *acc;$/;"	m	struct:__anon1	file:
add_block	io.c	/^void add_block(FILE *fp, enum iofields iblock)$/;"	f
add_particle_to_node	tree.c	/^static inline void add_particle_to_node(const int ipart, const int node)$/;"	f	file:
adiabatic_index	globals.h	/^#define adiabatic_index /;"	d
blksize	io.c	/^int blksize;$/;"	v
c	globals.h	/^#define c	/;"	d
calc_distribution_function_table	velocities.c	/^static void calc_distribution_function_table(int iCluster)$/;"	f	file:
center_positions	positions.c	/^void center_positions()$/;"	f
cij	cosmo.c	/^const double cij[5][5] = {  \/\/ Pierpaoli+ 01 Table 1$/;"	v
compare_int	positions.c	/^int compare_int(const void * a, const void *b)$/;"	f
compare_peanoKeys	peano.c	/^int compare_peanoKeys(const void * a, const void *b)$/;"	f
create_node_from_particle	tree.c	/^static inline void create_node_from_particle(const int ipart,const int parent, $/;"	f	file:
curvature_parameter	cosmo.c	/^double curvature_parameter(const double Omega_0)$/;"	f
dfdr_table	positions.c	/^static double dfdr_table[NTABLE], offset_table[NTABLE],$/;"	v	file:
distribution_function	velocities.c	/^static double distribution_function(const double E)$/;"	f	file:
dm_density_profile	velocities.c	/^static double dm_density_profile(const int i, const float r)$/;"	f	file:
dm_potential_profile	velocities.c	/^double dm_potential_profile(const int i, const float r)$/;"	f
down	oldtree.c	/^    size_t down;        \/\/ To first daughter node or target part$/;"	m	struct:tree_node	file:
eddington_integrant	velocities.c	/^static double eddington_integrant(double psi, void *params)$/;"	f	file:
fE_params	velocities.c	/^static interpolation_parameters fE_params;$/;"	v	file:
fill	io.h	/^    char fill[64];      \/\/ fill to 256 Bytes$/;"	m	struct:GADGET_Header
fill_mass_profile_table	positions.c	/^static void fill_mass_profile_table(const int i)$/;"	f	file:
fill_write_buffer	io.c	/^void fill_write_buffer(enum iofields blocknr, void *wbuf,$/;"	f
flag_cooling	io.h	/^    int flag_cooling;$/;"	m	struct:GADGET_Header
flag_feedback	io.h	/^    int flag_feedback;$/;"	m	struct:GADGET_Header
flag_metals	io.h	/^    int flag_metals;$/;"	m	struct:GADGET_Header
flag_sfr	io.h	/^    int flag_sfr;$/;"	m	struct:GADGET_Header
flag_stellarage	io.h	/^    int flag_stellarage;$/;"	m	struct:GADGET_Header
fourpithird	globals.h	/^#define fourpithird /;"	d
gas_potential_profile	velocities.c	/^double gas_potential_profile(const int i, const float r)$/;"	f
gravity_kernel	wvt_relax.c	/^static inline float gravity_kernel(const float r, const float h)$/;"	f	file:
gravity_tree_init	tree.c	/^void gravity_tree_init()$/;"	f
h_100	cosmo.h	/^    double h_100;$/;"	m	struct:Universe
hernquist_distribution_func	velocities.c	/^static double hernquist_distribution_func(const int iCluster, const double E) $/;"	f	file:
hi	sort.c	/^    char *hi;$/;"	m	struct:SharedStackDataChar	file:
hi	sort.c	/^    size_t *hi;$/;"	m	struct:SharedStackDataSizeT	file:
idx2sign	oldtree.c	/^static int idx2sign(int idx, int comp)$/;"	f	file:
init_tree	oldtree.c	/^static void init_tree()$/;"	f	file:
interpolation_parameters	velocities.c	/^} interpolation_parameters;$/;"	t	typeref:struct:__anon1	file:
invert_mass_profile	positions.c	/^static double invert_mass_profile(const double q)$/;"	f	file:
inverted_subhalo_number_density_profile	substructure.c	/^static double inverted_subhalo_number_density_profile(const double q)$/;"	f	file:
iofields	io.h	/^enum iofields{$/;"	g
k_B	globals.h	/^#define k_B /;"	d
key_fragment	tree.c	/^static inline int key_fragment(const int node)$/;"	f	file:
kpc2cgs	globals.h	/^#define kpc2cgs /;"	d
len2	macro.h	/^#define len2(/;"	d
len2_sq	macro.h	/^#define len2_sq(/;"	d
len3	macro.h	/^#define len3(/;"	d
len3_sq	macro.h	/^#define len3_sq(/;"	d
lo	sort.c	/^    char *lo;$/;"	m	struct:SharedStackDataChar	file:
lo	sort.c	/^    size_t *lo;$/;"	m	struct:SharedStackDataSizeT	file:
m_e	globals.h	/^#define m_e	/;"	d
m_p	globals.h	/^#define m_p /;"	d
main	main.c	/^int main(int argc, char *argv[])$/;"	f
mass	io.h	/^    double mass[6];$/;"	m	struct:GADGET_Header
max	macro.h	/^#define max(/;"	d
max_tree_size	oldtree.c	/^static size_t max_tree_size, treesize; \/\/ Number of nodes in tree $/;"	v	file:
mean_mol_weight	globals.h	/^#define mean_mol_weight /;"	d
min	macro.h	/^#define min(/;"	d
my_fwrite	io.c	/^size_t my_fwrite(void *data, size_t size, size_t nItems, FILE *fp)$/;"	f
n2ne	globals.h	/^#define n2ne /;"	d
next	oldtree.c	/^    size_t next;        \/\/ To next subnode of father or to unkle $/;"	m	struct:tree_node	file:
nfw_mass_profile	substructure.c	/^nfw_mass_profile(const double c_nfw, const double rs, const double r)$/;"	f	file:
nfw_scale_radius	substructure.c	/^static double nfw_scale_radius(const double c_nfw, const double M_t,$/;"	f	file:
ngblist	wvt_relax.c	/^int ngblist[NGBMAX] = { 0 }, Ngbcnt ;$/;"	v
normalise_magnetic_field	magnetic_field.c	/^static void normalise_magnetic_field()$/;"	f	file:
npart	io.h	/^    int npart[6];$/;"	m	struct:GADGET_Header
npart	oldtree.c	/^    int npart;          \/\/ Number of particles in node $/;"	m	struct:tree_node	file:
npartTotal	io.h	/^    unsigned int npartTotal[6];$/;"	m	struct:GADGET_Header
npartTotalHighWord	io.h	/^    unsigned int npartTotalHighWord[6];$/;"	m	struct:GADGET_Header
num_files	io.h	/^    int num_files;$/;"	m	struct:GADGET_Header
offset_table	positions.c	/^static double dfdr_table[NTABLE], offset_table[NTABLE],$/;"	v	file:
p2	macro.h	/^#define p2(/;"	d
p3	macro.h	/^#define p3(/;"	d
particle_is_inside_node	tree.c	/^static inline bool particle_is_inside_node(const peanoKey key, const int lvl,		const int node)$/;"	f	file:
peanoKey	peano.h	/^typedef __uint128_t peanoKey;$/;"	t
pi	globals.h	/^#define pi /;"	d
pos	oldtree.c	/^    float pos[3];       \/\/ Center of node $/;"	m	struct:tree_node	file:
pos2idx	oldtree.c	/^static int pos2idx(size_t ipart,size_t node)$/;"	f	file:
potential_profile	velocities.c	/^static double potential_profile(const int i, const float r)$/;"	f	file:
print_int_bits128	peano.c	/^static void print_int_bits128(const peanoKey val)$/;"	f	file:
print_int_bits128r	peano.c	/^static void print_int_bits128r(const peanoKey val)$/;"	f	file:
redshift	io.h	/^    double redshift;$/;"	m	struct:GADGET_Header
refine	oldtree.c	/^static void refine(const size_t ipart, size_t *grandparent, size_t *parent)$/;"	f	file:
reject_subhalo	substructure.c	/^static bool reject_subhalo(const int i)$/;"	f	file:
reorder_particles	peano.c	/^static void reorder_particles()$/;"	f	file:
sample_DM_particles	positions.c	/^static void sample_DM_particles(const int i)$/;"	f	file:
sample_Gas_particles	positions.c	/^static void sample_Gas_particles(const int i)$/;"	f	file:
sampling_radius	substructure.c	/^static double sampling_radius(const int i, const double d)$/;"	f	file:
set_block_info	io.c	/^void set_block_info(enum iofields blocknr)$/;"	f
set_magnetic_vector_potential	magnetic_field.c	/^static void set_magnetic_vector_potential()$/;"	f	file:
set_subhalo_bulk_velocities	velocities.c	/^void set_subhalo_bulk_velocities()$/;"	f
set_subhalo_bulkvel	substructure.c	/^static void set_subhalo_bulkvel(const int i)$/;"	f	file:
set_subhalo_masses	substructure.c	/^static void set_subhalo_masses(const double mass_fraction)$/;"	f	file:
set_subhalo_particle_numbers	substructure.c	/^static void set_subhalo_particle_numbers()$/;"	f	file:
set_subhalo_pointers	substructure.c	/^static void	set_subhalo_pointers()$/;"	f	file:
set_subhalo_positions	substructure.c	/^static void set_subhalo_positions(int i)$/;"	f	file:
set_subhalo_properties	substructure.c	/^static void set_subhalo_properties(const int i)$/;"	f	file:
setup_internal_energy_profile	temperature.c	/^static void setup_internal_energy_profile(const int i)$/;"	f	file:
shared_stack_char	sort.c	/^} shared_stack_char[STACK_SIZE] = {{NULL,NULL}};$/;"	v	typeref:struct:SharedStackDataChar	file:
shared_stack_sizet	sort.c	/^} shared_stack_sizet[STACK_SIZE] = {{0,0}};$/;"	v	typeref:struct:SharedStackDataSizeT	file:
size	oldtree.c	/^    float size;         \/\/ Spatial extent of node $/;"	m	struct:tree_node	file:
sort_particles	positions.c	/^static void sort_particles(int *ids, const size_t nPart)$/;"	f	file:
sph_kernel_M4	sph.c	/^static inline float sph_kernel_M4(const float r, const float h) \/\/ cubic spline$/;"	f	file:
sph_kernel_M4	wvt_relax.c	/^static inline float sph_kernel_M4(const float r, const float h) \/\/ cubic spline$/;"	f	file:
sph_kernel_WC2	wvt_relax.c	/^static inline double sph_kernel_WC2(const float r, const float h)$/;"	f	file:
sph_kernel_WC6	sph.c	/^static inline float sph_kernel_WC6(const float r, const float h)$/;"	f	file:
sph_kernel_WC6	wvt_relax.c	/^static inline double sph_kernel_WC6(const float r, const float h)$/;"	f	file:
sph_kernel_derivative_M4	sph.c	/^static inline float sph_kernel_derivative_M4(const float r, const float h)$/;"	f	file:
sph_kernel_derivative_WC6	sph.c	/^static inline float sph_kernel_derivative_WC6(const float r, const float h)$/;"	f	file:
sph_kernel_wc2	setup.c	/^static double sph_kernel_wc2(const float r, const float h)$/;"	f	file:
sph_kernel_wc2	velocities.c	/^static double sph_kernel_wc2(const float r, const float h)$/;"	f	file:
spline	velocities.c	/^	gsl_spline *spline;$/;"	m	struct:__anon1	file:
sqrt2	globals.h	/^#define sqrt2	/;"	d
sqrt3	globals.h	/^#define sqrt3 /;"	d
subhalo_mass_fraction	substructure.c	/^static double subhalo_mass_fraction()$/;"	f	file:
subhalo_mass_function	substructure.c	/^static double subhalo_mass_function(const double m)$/;"	f	file:
subhalo_number_density_profile	substructure.c	/^static double subhalo_number_density_profile(const double r)$/;"	f	file:
t2a_cgs	cosmo.c	/^double t2a_cgs(double t)$/;"	f
test_peanokey	peano.c	/^void test_peanokey()$/;"	f
tidal_radius	substructure.c	/^static double tidal_radius(const int i, const double r)$/;"	f	file:
time	io.h	/^    double time;$/;"	m	struct:GADGET_Header
tree	oldtree.c	/^} *tree;$/;"	v	typeref:struct:tree_node
tree_node	oldtree.c	/^struct tree_node{$/;"	s	file:
treesize	oldtree.c	/^static size_t max_tree_size, treesize; \/\/ Number of nodes in tree $/;"	v	file:
u_integrant	temperature.c	/^static double u_integrant(double r, void *param) \/\/ Donnert 2014, eq. 9$/;"	f	file:
u_mol	globals.h	/^#define u_mol	/;"	d
write_header	io.c	/^void write_header(FILE *fp)$/;"	f
yHelium	globals.h	/^#define yHelium	/;"	d
